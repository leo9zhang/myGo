// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userclient

import (
	"context"
	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
	user2 "mall/service/user/rpc/user"
)

type (
	LoginRequest     = user2.LoginRequest
	LoginResponse    = user2.LoginResponse
	RegisterRequest  = user2.RegisterRequest
	RegisterResponse = user2.RegisterResponse
	UserInfoRequest  = user2.UserInfoRequest
	UserInfoResponse = user2.UserInfoResponse

	User interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := user2.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}
